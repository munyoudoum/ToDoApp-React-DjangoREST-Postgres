{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","api","state","todoList","activeItem","id","title","completed","editing","fetchTasks","bind","handleChange","handleSubmit","getCookie","deleteItem","strikeUnstrike","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","this","fetch","then","response","json","data","setState","e","value","target","preventDefault","csrftoken","url","method","headers","body","JSON","stringify","catch","error","console","log","task","tasks","self","className","onSubmit","style","flex","onChange","type","placeholder","map","index","key","onClick","startEdit","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.645a1c8a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nclass App extends React.Component {\n  api = \"http://127.0.0.1:8000/api/\";\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoList: [],\n      activeItem: {\n        id: null,\n        title: \"\",\n        completed: false,\n      },\n      editing: false,\n    };\n    this.fetchTasks = this.fetchTasks.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getCookie = this.getCookie.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.strikeUnstrike = this.strikeUnstrike.bind(this);\n  }\n  getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== \"\") {\n      const cookies = document.cookie.split(\";\");\n      for (let i = 0; i < cookies.length; i++) {\n        const cookie = cookies[i].trim();\n        // Does this cookie string begin with the name we want?\n        if (cookie.substring(0, name.length + 1) === name + \"=\") {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  }\n  componentWillMount() {\n    this.fetchTasks();\n  }\n  fetchTasks() {\n    fetch(this.api + \"task-list/\")\n      .then((response) => response.json())\n      .then((data) =>\n        this.setState({\n          todoList: data,\n        })\n      );\n  }\n\n  handleChange(e) {\n    var value = e.target.value;\n    this.setState({\n      activeItem: {\n        ...this.state.activeItem,\n        title: value,\n      },\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    var csrftoken = this.getCookie(\"csrftoken\");\n    var url = this.api + \"task-create/\";\n    if (this.state.editing) {\n      url = this.api + `task-update/${this.state.activeItem.id}/`;\n      this.setState({ editing: false });\n    }\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-CSRFToken\": csrftoken,\n      },\n      body: JSON.stringify(this.state.activeItem),\n    })\n      .then((response) => {\n        this.fetchTasks();\n        this.setState({\n          activeItem: {\n            id: null,\n            title: \"\",\n            completed: false,\n          },\n        });\n      })\n      .catch(function (error) {\n        console.log(\"ERROR: \" + error);\n      });\n  }\n  startEdit(task) {\n    this.setState({\n      activeItem: task,\n      editing: true,\n    });\n  }\n\n  deleteItem(task) {\n    var csrftoken = this.getCookie(\"csrftoken\");\n    fetch(this.api + `task-delete/${task.id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"x-CSRFToken\": csrftoken,\n      },\n    }).then((response) => {\n      this.fetchTasks();\n    });\n  }\n  strikeUnstrike(task) {\n    task.completed = !task.completed;\n    var csrftoken = this.getCookie(\"csrftoken\");\n    var url = this.api + `task-update/${task.id}/`;\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"x-CSRFToken\": csrftoken,\n      },\n      body: JSON.stringify({ completed: task.completed, title: task.title }),\n    }).then((response) => {\n      this.fetchTasks();\n    });\n  }\n\n  render() {\n    var tasks = this.state.todoList;\n    var self = this;\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div id=\"task-container\">\n            <div id=\"form-wrapper\">\n              <form onSubmit={this.handleSubmit} id=\"form\">\n                <div className=\"flex-wrapper\">\n                  <div style={{ flex: 6 }}>\n                    <input\n                      onChange={this.handleChange}\n                      className=\"form-control\"\n                      id=\"title\"\n                      type=\"text\"\n                      name=\"title\"\n                      placeholder=\"Add task...\"\n                      value={this.state.activeItem.title}\n                    />\n                  </div>\n\n                  <div style={{ flex: 1 }}>\n                    <input\n                      id=\"submit\"\n                      className=\"btn btn-warning\"\n                      type=\"submit\"\n                      name=\"Add\"\n                    />\n                  </div>\n                </div>\n              </form>\n            </div>\n            <div id=\"list-wrapper\">\n              {tasks.map(function (task, index) {\n                return (\n                  <div key={index} className=\"task-wrapper flex-wrapper\">\n                    <div\n                      onClick={() => self.strikeUnstrike(task)}\n                      style={{ flex: 7 }}\n                    >\n                      {task.completed === false ? (\n                        <span>{task.title}</span>\n                      ) : (\n                        <strike>{task.title}</strike>\n                      )}\n                    </div>\n                    <div style={{ flex: 1 }}>\n                      <button\n                        onClick={() => self.startEdit(task)}\n                        className=\"btn btn-sm btn-outline-info\"\n                      >\n                        Edit\n                      </button>\n                    </div>\n                    <div style={{ flex: 1 }}>\n                      <button\n                        onClick={() => self.deleteItem(task)}\n                        className=\"btn btn-sm btn-outline-danger delete\"\n                      >\n                        delete\n                      </button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}